@layer utils {
	:where(.grid) {
		/* local vars */
		--cols: 1;
		--gap: 0rem;
		--maxWidth: 1fr;
		--minWidth: clamp(12rem, 16vmin, 24rem);
		--repeat: auto-fill;

		gap: var(--gap);
		grid-template-columns: repeat(var(--repeat),
				minmax(max(var(--minWidth), calc(100% / var(--cols) - var(--gap))),
					var(--maxWidth)));
		height: max-content;

		@for $i from 1 through 12 {
			&.cols-#{$i} {
				--cols: #{$i};
			}
		}

		&.subgrid {
			grid-template-columns: subgrid;
			grid-template-rows: subgrid;
		}

		&.container {
			grid-template-columns:
				[expand-start] minmax(var(--prefers-containerOutterWidth), 1fr) [contain-start] minmax(0,
					var(--prefers-containerWidth)) [contain-end] minmax(var(--prefers-containerOutterWidth), 1fr) [expand-end];

			& > * {
				grid-column: contain;
			}

			& > *[ignore-container] {
				grid-column: expand;
			}

			& > *[contain-children] {
				/* (100vw - widthToMatch) / 2 , the min in the minmax() + the gap */
				padding-inline: max(((100% - var(--prefers-containerWidth)) / 2),
						var(--prefers-containerOutterWidth) + 1px) !important;
			}
		}
	}
}