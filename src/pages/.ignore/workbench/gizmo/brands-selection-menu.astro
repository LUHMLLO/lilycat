---
// const brands = await Astro.glob('public/assets/media/trpc/*').then((files) => {
// 	return files.map((file) => file.default);
// });

const serviceNames = [
	'Solar',
	'Roofing',
	'HVAC',
	'Geothermal Insulation',
	'Efficiency Experts',
];
---

<!doctype html>
<html lang='en'>
	<head>
		<meta charset='UTF-8' />
		<meta name='viewport' content='width=device-width, initial-scale=1.0' />
		<title>Document</title>
	</head>
	<body>
		<section id='brand-selection-view'>
			<grid data-props='--2' class='g-sm'>
				{
					serviceNames.map((service) => (
						<article class='__brand'>
							<figure>
								<img
									src='/assets/media/hytech/outer.png'
									alt='brand_thumbnail'
								/>
								<img
									src='/assets/media/hytech/inner.png'
									alt='brand_thumbnail'
								/>
							</figure>
							<h6>{service}</h6>
							<input type='checkbox' name='tobechanged' />
						</article>
					))
				}
			</grid>
		</section>
	</body>

	<style lang='css'>
		/* 
            anything above here will be considered deprecated (eventually)
            a lot things will change, a better implementation will be made

            for future references use the code below as 
            a more up-to-date guideline
        */

		:root {
			--baseFontFamily: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI',
				Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue',
				sans-serif;
			--baseFontSize: calc(
				var(--baseScalingRatio) * clamp(0.72rem, 1rem, 0.88rem)
			);
			--baseFontSize: calc(
				var(--baseScalingRatio) *
					clamp(
						clamp(0.72rem, 1rem, 0.88rem),
						0.0625dvw,
						clamp(1rem, 1vw, 16pt)
					)
			);
			--baseFontWeight: 400;
			--baseLineHeight: clamp(1, 1.25, 1.5);

			/* for typescale calcs */
			--baseScalingRatio: 1.125;

			/* for font calculations, gaps, paddings, . . . */
			--scale-5xs: calc(var(--baseFontSize) / pow(var(--baseScalingRatio), 7));
			--scale-4xs: calc(var(--baseFontSize) / pow(var(--baseScalingRatio), 6));
			--scale-3xs: calc(var(--baseFontSize) / pow(var(--baseScalingRatio), 5));
			--scale-2xs: calc(var(--baseFontSize) / pow(var(--baseScalingRatio), 4));
			--scale-xs: calc(var(--baseFontSize) / pow(var(--baseScalingRatio), 3));
			--scale-sm: calc(var(--baseFontSize) / pow(var(--baseScalingRatio), 2));
			--scale-md: calc(var(--baseFontSize) / pow(var(--baseScalingRatio), 1));

			--scale-nm: calc(var(--baseFontSize) * pow(var(--baseScalingRatio), 1));
			--scale-lg: calc(var(--baseFontSize) * pow(var(--baseScalingRatio), 2));
			--scale-xl: calc(var(--baseFontSize) * pow(var(--baseScalingRatio), 3));
			--scale-2xl: calc(var(--baseFontSize) * pow(var(--baseScalingRatio), 4));
			--scale-3xl: calc(var(--baseFontSize) * pow(var(--baseScalingRatio), 5));
			--scale-4xl: calc(var(--baseFontSize) * pow(var(--baseScalingRatio), 6));
			--scale-5xl: calc(var(--baseFontSize) * pow(var(--baseScalingRatio), 7));

			--clr-accent: hsl(124, 69%, 40%);
			--clr-context: hsl(24, 88%, 40%);
			--clr-background: hsl(0, 0%, 4%);
			--clr-text: hsl(0, 0%, 96%);
			--clr-subtext: hsl(0, 0%, 56%);
			--clr-primary: hsl(0, 0%, 7%);
			--clr-secondary: hsl(0, 0%, 9%);
			--clr-tertiary: hsl(0, 0%, 10%);
			--clr-debug: hsl(330, 32%, 56%);
			--clr-error: hsl(359, 50%, 32%);
			--clr-info: hsl(197, 40%, 48%);
			--clr-success: hsl(132, 40%, 48%);
			--clr-warning: hsl(48, 40%, 48%);
		}

		* {
			box-sizing: border-box;
			margin: 0;
			max-width: 100%;
			padding: 0;
		}

		body {
			background-color: var(--clr-background);
			font-family: 'Monserrat', 'Helvetica', 'Arial', sans-serif;
			padding: var(--scale-sm);
		}

		*:is(.__grid) {
			--cols: 1;
			--gap: 0rem;

			--count: auto-fill;
			--track_min: clamp(6rem, 8rem, 12rem);
			--track_max: 1fr;

			display: grid;
			gap: var(--gap);
			grid-template-columns: repeat(
				var(--count),
				minmax(
					max(var(--track_min), 100% / var(--cols) - var(--gap)),
					var(--track_max)
				)
			);
			height: max-content;

			&:where(.--cols-2) {
				--cols: 2;
			}

			&:where(.--cols-3) {
				--cols: 3;
			}

			&:where(.--cols-4) {
				--cols: 4;
			}

			&:where(.--cols-6) {
				--cols: 6;
			}

			&:where(.--cols-7) {
				--cols: 7;
			}

			&:where(.--cols-8) {
				--cols: 8;
			}

			&:where(.--cols-9) {
				--cols: 9;
			}

			&:where(.--cols-10) {
				--cols: 10;
			}

			&:where(.--cols-11) {
				--cols: 11;
			}

			&:where(.--cols-12) {
				--cols: 12;
			}
		}

		article:is(.__brand) {
			display: grid;
			border-radius: var(--scale-3xs);
			border: solid 3pt var(--clr-primary);
			overflow: clip;
			position: relative;
			transition: border 128ms cubic-bezier(1, 0, 0, 1);

			& > :where(figure) {
				aspect-ratio: 3/2;
				mask: linear-gradient(0deg, transparent, white, white, white);
				overflow: clip;
				place-content: center center;
				position: relative;
				transition: background 360ms cubic-bezier(1, 0, 0, 1);
				width: 100%;

				& > :where(img, picture, svg) {
					height: 100%;
					inset: 0;
					margin: auto;
					object-fit: contain;
					object-position: center;
					position: absolute;
					width: 100%;

					&:first-of-type {
						animation: rotate 30s linear infinite;
						animation-play-state: paused;
					}
				}
			}

			& > :where(h6) {
				background-color: color-mix(
					in srgb,
					var(--clr-primary),
					transparent 16%
				);
				color: var(--clr-text);
				display: grid;
				font-size: var(--scale-sm);
				font-weight: 600;
				height: 2.5lh;
				inset: auto 0 0 0;
				mix-blend-mode: luminosity;
				place-content: center center;
				position: absolute;
				text-align: center;
				text-transform: uppercase;
				text-wrap: balance;
				width: 100%;
			}

			& > :where(p) {
				color: var(--clr-text);
				font-size: var(--scale-sm);
				font-weight: 600;
				padding: var(--scale-sm);
			}

			& > :where(input[type='radio'], input[type='checkbox']) {
				cursor: pointer;
				display: block;
				height: 100%;
				inset: 0;
				opacity: 0;
				position: absolute;
				width: 100%;
				z-index: 3;

				&:focus-visible {
					border-color: color-mix(in srgb, var(--clr-accent), white 3%);
				}
			}

			&:has(:where(input[type='radio'], input[type='checkbox']):not(:checked)) {
				& > figure {
					background-color: var(--clr-primary);
				}
			}

			&:has(:where(input[type='radio'], input[type='checkbox']):checked) {
				border-color: var(--clr-accent);
				& > figure {
					background-color: var(--clr-text);
					& > img {
						mix-blend-mode: difference;

						&:first-of-type {
							animation-play-state: running;
						}
					}
				}
			}
		}

		@keyframes rotate {
			to {
				rotate: 360deg;
			}
		}
	</style>
</html>
