@use '../lib/scale' as *;
@use '../lib/colors' as colors;
@use '../lib/attrs' as *;
@use 'sass:map';

@layer x-variants {
	.doc-box {
		align-items: center;

		aspect-ratio: 1/1;

		border-radius: var(--radius);

		gap: map.get($Scale, 5xs);

		justify-content: center;

		overflow: hidden;

		outline: dashed var(--xxxs);
		outline-offset: calc(-1 * var(--xxxs));
		outline-color: map.get(colors.$Surface, 400);

		padding: map.get($Scale, nm);

		isolation: isolate;
	}

	aside[x-variant='pane'] {
		height: 100dvh;
		max-height: 100%;
	}

	article[x-variant='card'] {
		border-radius: var(--radius);
		background-color: map.get(colors.$Surface, 200);

		header {
			display: flex;
			flex-direction: column;
			gap: map.get($Scale, 5xs);
		}

		*[x-variant='content'] {
			display: flex;
			flex-direction: column;
			gap: map.get($Scale, xs);
			padding: map.get($Scale, sm) map.get($Scale, nm);
		}
	}

	button[x-style='filled'] {
		background-color: map.get(colors.$Surface, 700);
		color: map.get(colors.$Text, 100);
		outline-color: transparent;

		&:focus {
			outline-color: map.get(colors.$Accent, 400);
		}

		@media (hover: hover) {
			&:hover {
				background-color: map.get(colors.$Surface, 600);
				outline-color: map.get(colors.$Surface, 400);
			}
		}

		&:active {
			background-color: map.get(colors.$Surface, 800);
			outline-color: map.get(colors.$Surface, 700);
		}
	}

	code[x-variant='block'] {
		background-color: map.get(colors.$Surface, 800);
		border-radius: var(--radius);
		padding: map.get($Scale, nm);
	}

	details[x-variant='collapsible'] {
		border-radius: var(--radius);
		overflow: hidden;
		width: 100%;

		summary {
			display: flex;
			align-items: center;
			padding: map.get($Scale, sm) map.get($Scale, nm);
			user-select: none;

			background-color: map.get(colors.$Surface, 700);

			&:focus {
				background-color: map.get(colors.$Surface, 600);
			}

			@media (hover: hover) {
				&:hover {
					background-color: map.get(colors.$Surface, 600);
				}
			}

			&:active {
				background-color: map.get(colors.$Surface, 800);
			}
		}

		[x-variant='content'] {
			background-color: map.get(colors.$Surface, 800);
			display: flex;
			flex-direction: column;
			gap: map.get($Scale, 5xs);
			padding: map.get($Scale, 5xs);
		}

		&[x-style='flat'] {
			summary {
				background-color: transparent;
				padding: 0;
			}
			[x-variant='content'] {
				background-color: transparent;
			}
		}
	}

	details[x-variant='dropdown'] {
		display: inline-flex;
		flex-direction: column;

		summary {
			border-radius: var(--radius);
			padding: map.get($Scale, sm) map.get($Scale, nm);

			align-items: center;
			display: flex;
			flex-direction: row;
			gap: map.get($Scale, 5xs);
			font-weight: 500;
			list-style: none;
			list-style-type: none;

			z-index: 2;

			width: max-content;
			white-space: nowrap;
			user-select: none;

			background-color: map.get(colors.$Surface, 700);

			&:focus {
				background-color: map.get(colors.$Surface, 600);
			}

			@media (hover: hover) {
				&:hover {
					background-color: map.get(colors.$Surface, 600);
				}
			}

			&:active {
				background-color: map.get(colors.$Surface, 800);
			}
		}

		[x-variant='content'] {
			z-index: 1;
			position: absolute;
			top: 100%;
			right: 0;
			left: 0;

			background-color: map.get(colors.$Surface, 800);
			border-radius: var(--radius);
			display: flex;
			flex-direction: column;
			gap: map.get($Scale, 5xs);
			margin-top: DownScale(18);
			min-height: max-content;
			min-width: max-content;
			padding: map.get($Scale, 5xs);
		}

		&[x-style='flat'] {
			summary {
				background-color: transparent;
				padding: 0;
			}
		}
	}

	dialog[x-variant='modal'] {
		isolation: isolate;
		overflow: hidden;

		header {
			align-items: center;
			display: flex;
			gap: map.get($Scale, xs);
			justify-content: space-between;
			z-index: 2;

			h1,
			h2,
			h3,
			h4,
			h5,
			h6,
			span {
				flex-grow: 1;
			}
		}

		[x-variant='content'] {
			display: flex;
			flex-direction: column;
			flex-grow: 1;
			flex-shrink: 1;
			gap: map.get($Scale, xs);
			isolation: isolate;
			max-height: 100%;
			overflow-y: auto;
			touch-action: pan-y;
			width: 100%;
			z-index: 1;

			* {
				min-height: 0;
				flex-shrink: 0;
			}

			// &::before {
			// 	box-shadow: 0 0.1875rem 0.5625rem 0.1875rem
			// 		map.get(colors.$Surface, 800);
			// 	content: '';
			// 	display: block;
			// 	position: sticky;
			// 	right: 0;
			// 	top: 0;
			// 	left: 0;
			// 	width: 100%;
			// 	z-index: 2;
			// }

			// &::after {
			// 	box-shadow: 0 -0.1875rem 0.5625rem 0.1875rem map.get(colors.$Surface, 800);
			// 	content: '';
			// 	display: block;
			// 	position: sticky;
			// 	right: 0;
			// 	bottom: 0;
			// 	left: 0;
			// 	width: 100%;
			// 	z-index: 2;
			// }
		}

		footer {
			align-items: center;
			display: flex;
			gap: map.get($Scale, xs);
			justify-content: end;
			z-index: 2;
		}
	}

	fieldset[x-variant='checkbox'],
	fieldset[x-variant='radio'] {
		align-items: center;
		flex-direction: row;
	}

	fieldset[x-variant='input'] {
		border-radius: var(--radius);
		padding: map.get($Scale, xs) map.get($Scale, 2xs);
		gap: map.get($Scale, 5xs);

		display: flex;
		flex-direction: row;
		align-items: center;

		outline: solid var(--xxxs);
		outline-offset: calc(-1 * var(--xxxs));
		outline-color: map.get(colors.$Surface, 200);

		transition: background-color var(--transitionSettings),
			color var(--transitionSettings), outline-color var(--transitionSettings),
			border-color var(--transitionSettings);

		input {
			background-color: transparent;
			border-radius: 0;
			border: none;
			flex-grow: 1;
			flex-shrink: 1;
			max-width: 100%;
			outline: none;
			overflow: hidden;
			padding: 0;
			text-overflow: ellipsis;
			white-space: nowrap;
		}

		@media (hover: hover) {
			&:hover {
				outline-color: map.get(colors.$Accent, 400);
			}
		}

		&:focus-within {
			outline-color: map.get(colors.$Accent, 500);
		}
	}

	fieldset[x-variant='switch'] {
		align-items: center;
		background-color: map.get(colors.$Surface, 800);
		border-radius: map.get($Scale, 5xl);
		display: inline-flex;
		flex-direction: row;
		isolation: isolate;
		padding: 0.0625rem;
		width: map.get($Scale, 5xl);

		[type='checkbox'] {
			inset: 0;
			height: 100%;
			position: absolute;
			width: 100%;
			z-index: 1;

			&::before {
				inset: 0;
				height: 100%;
				position: absolute;
				visibility: hidden;
				width: 100%;
			}
		}

		[x-layout='row'] {
			display: flex;
			justify-content: flex-start;
			width: 100%;
			z-index: 2;
			pointer-events: none;
			transition: background-color var(--transitionSettings);
			user-select: none;

			[class*='material-symbols'] {
				aspect-ratio: 1/1;
				background-color: map.get(colors.$Surface, 700);
				border-radius: 50%;
				color: transparent;
				font-size: map.get($Scale, nm);
				height: map.get($Scale, nm);
				transition: background-color var(--transitionSettings);
				width: map.get($Scale, nm);
			}
		}

		[type='checkbox']:checked {
			background-color: map.get(colors.$Accent, 500);
		}

		[type='checkbox']:checked + [x-layout='row'] {
			justify-content: flex-end;

			[class*='material-symbols'] {
				background-color: map.get(colors.$Accent, 100);
				color: map.get(colors.$Accent, 900);
			}
		}
	}

	hr[x-variant='horizontal'] {
		max-height: map.get($Scale, 5xs);
		width: 100%;
	}

	hr[x-variant='vertical'] {
		height: 100%;
		max-width: map.get($Scale, 5xs);
	}

	main[x-variant='body'] {
		height: 100dvh;
		max-height: 100%;
	}

	span[x-variant='badge'] {
		background-color: map.get(colors.$Surface, 400);
		border-radius: var(--radius);
		display: inline-flex;
		flex-direction: row;
		font-size: map.get($Scale, 2xs);
		font-weight: 500;
		padding: map.get($Scale, 5xs) map.get($Scale, 5xs);
		width: max-content;
	}

	span[x-variant='tag'] {
		align-items: center;
		display: inline-flex;
		flex-direction: row;
		gap: map.get($Scale, 5xs);
		border-radius: var(--radius);
		padding: map.get($Scale, 5xs) map.get($Scale, sm);
		background-color: map.get(colors.$Surface, 400);
		width: max-content;
	}

	li[x-variant='step'] {
		align-items: center;
		display: flex;
		gap: map.get($Scale, 5xs);
		overflow: hidden;
		white-space: nowrap;

		width: 100%;
		width: -moz-available; /* WebKit-based browsers will ignore this. */
		width: -webkit-fill-available; /* Mozilla-based browsers will ignore this. */
		width: stretch;

		i,
		label {
			flex-shrink: 0;
		}

		label {
			overflow: hidden;
			text-overflow: ellipsis;
		}

		&::after {
			content: '';
			background-color: map.get(colors.$Accent, 500);
			display: inline-flex;
			flex-grow: 1;
			flex-shrink: 1;
			height: map.get($Scale, 5xs);
			margin-block: auto;
			min-width: map.get($Scale, nm);
			vertical-align: middle;
		}

		&:last-of-type {
			flex-shrink: 0;
			width: max-content;
			&::after {
				display: none !important;
			}
		}
	}

	ul[x-variant='stepper'] {
		align-items: center;
		display: flex;
		flex-shrink: 1;
		gap: map.get($Scale, 5xs);
		justify-content: center;
		white-space: nowrap;
	}

	ul[x-variant='breadcrumb'] {
		align-items: center;
		display: inline-flex;
		flex-shrink: 1;
		gap: map.get($Scale, 5xs);
		white-space: nowrap;
		width: max-content;
	}

	ul[x-variant='buttongroup'] {
		align-items: stretch;
		background-color: map.get(colors.$Surface, 800);
		border-radius: var(--radius);
		display: inline-flex;
		flex-shrink: 1;
		gap: 0.0625rem;
		justify-content: center;
		overflow: hidden;
		white-space: nowrap;
		width: max-content;

		button {
			background-color: map.get(colors.$Surface, 700);
			border-radius: 0;
			height: auto;
			outline: none;

			&:focus {
				background-color: map.get(colors.$Surface, 500);
			}

			@media (hover: hover) {
				&:hover {
					background-color: map.get(colors.$Surface, 600);
				}
			}

			&:active {
				background-color: map.get(colors.$Surface, 800);
			}
		}

		&[x-style='outlined'] {
			background-color: map.get(colors.$Surface, 700);

			outline: solid var(--xxxs);
			outline-offset: calc(-1 * var(--xxxs));
			outline-color: map.get(colors.$Surface, 700);

			isolation: isolate;

			button {
				background-color: map.get(colors.$Surface, 900);
				z-index: -1;

				&:focus {
					background-color: map.get(colors.$Surface, 700);
				}

				@media (hover: hover) {
					&:hover {
						background-color: map.get(colors.$Surface, 700);
					}
				}

				&:active {
					background-color: map.get(colors.$Surface, 800);
				}
			}
		}
	}

	ul[x-variant='tabs'] {
		align-items: center;
		background-color: map.get(colors.$Surface, 800);
		border-radius: map.get($Scale, 5xl);
		display: flex;
		flex-shrink: 1;
		justify-content: stretch;
		gap: var(--xxxs);
		overflow-x: auto;
		padding: var(--xxxs);
		touch-action: pan-x;
		white-space: nowrap;

		a[x-variant='tab'],
		button[x-variant='tab'] {
			background-color: inherit;
			border-radius: map.get($Scale, 5xl);
			color: map.get(colors.$Text, 500);
			display: inline-flex;
			flex-grow: 1;
			flex-shrink: 0;
			font-weight: 500 !important;
			font-size: map.get($Scale, sm);
			height: 100%;
			outline: none;
			padding: map.get($Scale, 5xs) map.get($Scale, sm);
			vertical-align: middle;
			min-width: max-content;

			&:focus {
				outline-color: map.get(colors.$Accent, 400);
			}

			@media (hover: hover) {
				&:hover {
					background-color: map.get(colors.$Surface, 600);
					outline-color: map.get(colors.$Surface, 400);
				}
			}

			&:active {
				background-color: map.get(colors.$Surface, 800);
				outline-color: map.get(colors.$Surface, 700);
			}

			&[x-tab='active'] {
				background-color: map.get(colors.$Accent, 500);
				color: map.get(colors.$Accent, 900);

				&:focus {
					background-color: map.get(colors.$Accent, 400);
				}

				@media (hover: hover) {
					&:hover {
						background-color: map.get(colors.$Accent, 400);
					}
				}

				&:active {
					background-color: map.get(colors.$Accent, 600);
				}
			}
		}

		&[x-style='flat'] {
			background-color: transparent;
			border-radius: 0;
			gap: 0;
			padding: 0;

			[x-variant='tab'] {
				background-color: transparent;
				border-radius: 0;

				&[x-tab='active'] {
					background-color: transparent;
					border-bottom: solid var(--xxxs) map.get(colors.$Accent, 500);
					color: map.get(colors.$Accent, 500);

					&:focus {
						background-color: map.get(colors.$Surface, 600);
						outline-color: map.get(colors.$Surface, 400);
					}

					@media (hover: hover) {
						&:hover {
							background-color: map.get(colors.$Surface, 600);
							outline-color: map.get(colors.$Surface, 400);
						}
					}

					&:active {
						background-color: map.get(colors.$Surface, 800);
						outline-color: map.get(colors.$Surface, 700);
					}
				}
			}
		}
	}

	ul[x-variant='dir'] {
		li::before {
			content: 'arrow_right_alt' !important;
			display: inline-flex;
			font-family: 'Material Symbols Rounded';
		}

		ul {
			li::before {
				content: 'subdirectory_arrow_right' !important;
			}
		}
	}

	ul[x-variant='ul'] {
		li::before {
			content: 'arrow_right' !important;
			display: inline-flex;
			font-family: 'Material Symbols Rounded';
		}
	}

	ol[x-variant='ol'] {
		counter-reset: li;

		li::before {
			content: counter(li) '.';
			counter-increment: li;
			display: inline-flex;
			font: inherit;
			font-variant-numeric: tabular-nums;
		}
	}
}
