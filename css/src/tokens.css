@layer tokens {

  /* colors */
  @property --clr-background {
    syntax: "<color>";
    inherits: true;
    initial-value: light-dark(hsl(0deg, 0%, 95%), hsl(0deg, 0%, 5%));
  }

  :root {
    --clr-background: light-dark(hsl(0deg, 0%, 95%), hsl(0deg, 0%, 5%));
  }

  @property --clr-text {
    syntax: "<color>";
    inherits: true;
    initial-value: light-dark(hsl(0deg, 0%, 25%), hsl(0deg, 0%, 85%));
  }

  :root {
    --clr-text: light-dark(hsl(0deg, 0%, 25%), hsl(0deg, 0%, 85%));
  }

  /* lowest most neutral */
  @property --clr-text-sub {
    syntax: "<color>";
    inherits: true;
    initial-value: light-dark(hsl(0deg, 0%, 50%), hsl(0deg, 0%, 50%));
  }

  :root {
    --clr-text-sub: light-dark(hsl(0deg, 0%, 50%), hsl(0deg, 0%, 50%));
  }

  /* highest in intensity */
  @property --clr-text-sup {
    syntax: "<color>";
    inherits: true;
    initial-value: light-dark(hsl(0deg, 0%, 95%), hsl(0deg, 0%, 95%));
  }

  :root {
    --clr-text-sup: light-dark(hsl(0deg, 0%, 95%), hsl(0deg, 0%, 95%));
  }

  @property --clr-primary {
    syntax: "<color>";
    inherits: true;
    initial-value: light-dark(hsl(0deg, 0%, 90%), hsl(0deg, 0%, 10%));
  }

  :root {
    --clr-primary: light-dark(hsl(0deg, 0%, 90%), hsl(0deg, 0%, 10%));
  }

  @property --clr-secondary {
    syntax: "<color>";
    inherits: true;
    initial-value: light-dark(hsl(0deg, 0%, 75%), hsl(0deg, 0%, 15%));
  }

  :root {
    --clr-secondary: light-dark(hsl(0deg, 0%, 75%), hsl(0deg, 0%, 15%));
  }

  @property --clr-tertiary {
    syntax: "<color>";
    inherits: true;
    initial-value: light-dark(hsl(0deg, 0%, 80%), hsl(0deg, 0%, 20%));
  }

  :root {
    --clr-tertiary: light-dark(hsl(0deg, 0%, 80%), hsl(0deg, 0%, 20%));
  }

  @property --clr-accent {
    syntax: "<color>";
    inherits: true;
    initial-value: light-dark(hsl(240, 55%, 60%), hsl(240, 55%, 65%));
  }

  :root {
    --clr-accent: light-dark(hsl(240, 55%, 60%), hsl(240, 55%, 65%));
  }

  @property --clr-context {
    syntax: "<color>";
    inherits: true;
    initial-value: light-dark(hsl(75, 56%, 70%), hsl(75, 56%, 40%));
  }

  :root {
    --clr-context: light-dark(hsl(75, 56%, 70%), hsl(75, 56%, 40%));
  }

  @property --clr-debug {
    syntax: "<color>";
    inherits: true;
    initial-value: hsl(340deg, 50%, 50%);
  }

  :root {
    --clr-debug: hsl(340deg, 50%, 50%);
  }

  @property --clr-error {
    syntax: "<color>";
    inherits: true;
    initial-value: hsl(0deg, 50%, 50%);
  }

  :root {
    --clr-error: hsl(0deg, 50%, 50%);
  }

  @property --clr-info {
    syntax: "<color>";
    inherits: true;
    initial-value: hsl(215deg, 50%, 50%);
  }

  :root {
    --clr-info: hsl(215deg, 50%, 50%);
  }

  @property --clr-success {
    syntax: "<color>";
    inherits: true;
    initial-value: hsl(145deg, 50%, 50%);
  }

  :root {
    --clr-success: hsl(145deg, 50%, 50%);
  }

  @property --clr-warning {
    syntax: "<color>";
    inherits: true;
    initial-value: hsl(50deg, 50%, 50%);
  }

  :root {
    --clr-warning: hsl(50deg, 50%, 50%);
  }

  /* color modulation amounts */
  @property --ratio-backgrounds {
    syntax: "<number>";
    inherits: false;
    initial-value: 1.618;
  }

  :root {
    --ratio-backgrounds: 1.618;
  }

  @property --ratio-texts {
    syntax: "<number>";
    inherits: false;
    initial-value: 3.618;
  }

  :root {
    --ratio-texts: 3.618;
  }

  /* sizing */
  @property --xs {
    syntax: "<length>";
    inherits: true;
    initial-value: 5ch;
  }

  :root {
    --xs: calc(5 * 0.0625rem);
  }

  @property --sm {
    syntax: "<length>";
    inherits: true;
    initial-value: 10ch;
  }

  :root {
    --sm: calc(10 * 0.0625rem);
  }

  @property --md {
    syntax: "<length>";
    inherits: true;
    initial-value: 15ch;
  }

  :root {
    --md: calc(15 * 0.0625rem);
  }

  @property --nm {
    syntax: "<length>";
    inherits: true;
    initial-value: 20ch;
  }

  :root {
    --nm: calc(20 * 0.0625rem);
  }

  @property --lg {
    syntax: "<length>";
    inherits: true;
    initial-value: 25ch;
  }

  :root {
    --lg: calc(25 * 0.0625rem);
  }

  @property --xl {
    syntax: "<length>";
    inherits: true;
    initial-value: 30ch;
  }

  :root {
    --xl: calc(30 * 0.0625rem);
  }

  /* transitions */
  @property --animDuration {
    syntax: "<time>";
    inherits: true;
    initial-value: 325ms;
  }

  :root {
    --animDuration: 325ms;
  }

  @property --animTiming {
    syntax: "*";
    inherits: true;
    initial-value: cubic-bezier(0.45, 0, 0.25, 1.35);
  }

  :root {
    --animTiming: cubic-bezier(0.45, 0, 0.25, 1.35);
  }
}