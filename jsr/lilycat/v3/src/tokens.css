/**
 * Design System Tokens
 * Using modern CSS custom properties with @property
 */

@layer tokens {
  /* Color Tokens
   * ------------------------------
   * Core palette with semantic naming and HSL values for easy manipulation
   */

  /* Base Colors */
  @property --clr-surface {
    syntax: "<color>";
    inherits: true;
    initial-value: hsl(0deg 0% 5%);
  }

  @property --clr-content {
    syntax: "<color>";
    inherits: true;
    initial-value: hsl(0deg 0% 90%);
  }

  @property --clr-accent {
    syntax: "<color>";
    inherits: true;
    initial-value: hsl(250deg 75% 65%);
  }

  @property --clr-complementary {
    syntax: "<color>";
    inherits: true;
    initial-value: hsl(70deg 65% 50%);
  }

  /* Feedback Colors */
  @property --clr-debug {
    syntax: "<color>";
    inherits: true;
    initial-value: hsl(340deg 50% 50%);
  }

  @property --clr-error {
    syntax: "<color>";
    inherits: true;
    initial-value: hsl(0deg 50% 50%);
  }

  @property --clr-info {
    syntax: "<color>";
    inherits: true;
    initial-value: hsl(215deg 50% 50%);
  }

  @property --clr-success {
    syntax: "<color>";
    inherits: true;
    initial-value: hsl(145deg 50% 50%);
  }

  @property --clr-warning {
    syntax: "<color>";
    inherits: true;
    initial-value: hsl(50deg 50% 50%);
  }

  /* Color Aliases - Establishing relationships with base colors 
   * Example: Uncomment to create aliases for specific UI elements
   */
  /*
  @property --clr-text-primary {
    syntax: "<color>";
    inherits: true;
    initial-value: var(--clr-content);
  }

  @property --clr-text-secondary {
    syntax: "<color>";
    inherits: true;
    initial-value: color-mix(in srgb, var(--clr-content) 70%, transparent);
  }

  @property --clr-background-elevated {
    syntax: "<color>";
    inherits: true;
    initial-value: color-mix(in srgb, var(--clr-surface), white 5%);
  }
  */

  /* Spacing System
   * ------------------------------
   * Using px values for @property definitions since they need absolute units
   */
  @property --xs {
    syntax: "<length>";
    inherits: true;
    initial-value: 5px;
  }

  @property --sm {
    syntax: "<length>";
    inherits: true;
    initial-value: 10px;
  }

  @property --md {
    syntax: "<length>";
    inherits: true;
    initial-value: 15px;
  }

  @property --nm {
    syntax: "<length>";
    inherits: true;
    initial-value: 20px;
  }

  @property --lg {
    syntax: "<length>";
    inherits: true;
    initial-value: 25px;
  }

  @property --xl {
    syntax: "<length>";
    inherits: true;
    initial-value: 30px;
  }

  /* Typography Scale
   * ------------------------------
   * Using px values for @property definitions since they need absolute units
   */
  @property --type-xs {
    syntax: "<length>";
    inherits: true;
    initial-value: 25px;
  }

  @property --type-sm {
    syntax: "<length>";
    inherits: true;
    initial-value: 30px;
  }

  @property --type-md {
    syntax: "<length>";
    inherits: true;
    initial-value: 35px;
  }

  @property --type-nm {
    syntax: "<length>";
    inherits: true;
    initial-value: 40px;
  }

  @property --type-lg {
    syntax: "<length>";
    inherits: true;
    initial-value: 50px;
  }

  @property --type-xl {
    syntax: "<length>";
    inherits: true;
    initial-value: 60px;
  }

  /* Animation Tokens
   * ------------------------------
   * Consistent motion patterns
   */
  @property --animDuration {
    syntax: "<time>";
    inherits: true;
    initial-value: 325ms;
  }

  @property --animTiming {
    syntax: "*";
    inherits: true;
    initial-value: cubic-bezier(0.45, 0, 0.25, 1.35);
  }

  /* Derived Animation Presets */
  @property --anim-enter {
    syntax: "*";
    inherits: true;
    initial-value: var(--animDuration) var(--animTiming) 0ms;
  }

  @property --anim-exit {
    syntax: "*";
    inherits: true;
    initial-value: calc(var(--animDuration) * 0.75) ease-in 0ms;
  }

  /* Media Queries Breakpoints
   * ------------------------------
   * Available as CSS variables for JavaScript integration and consistency
   */
  :root {
    --breakpoint-sm: 30rem;
    /* 480px */
    --breakpoint-md: 48rem;
    /* 768px */
    --breakpoint-lg: 64rem;
    /* 1024px */
    --breakpoint-xl: 80rem;
    /* 1280px */
  }

  /* 
   * Relative unit versions for normal CSS variables
   * These provide rem alternatives to use in your actual styles
   */
  :root {
    /* Spacing with rem units for actual usage */
    --space-xs: 0.3125rem;
    /* 5px at 16px base */
    --space-sm: 0.625rem;
    /* 10px at 16px base */
    --space-md: 0.9375rem;
    /* 15px at 16px base */
    --space-nm: 1.25rem;
    /* 20px at 16px base */
    --space-lg: 1.5625rem;
    /* 25px at 16px base */
    --space-xl: 1.875rem;
    /* 30px at 16px base */

    /* Typography with rem units for actual usage */
    --font-xs: 1.5625rem;
    /* 25px at 16px base */
    --font-sm: 1.875rem;
    /* 30px at 16px base */
    --font-md: 2.1875rem;
    /* 35px at 16px base */
    --font-nm: 2.5rem;
    /* 40px at 16px base */
    --font-lg: 3.125rem;
    /* 50px at 16px base */
    --font-xl: 3.75rem;
    /* 60px at 16px base */
  }

  /* Overrides for compatibility with older browsers */
  @supports not (background: paint(something)) {
    :root {
      /* Fallback color tokens */
      --clr-surface: #0d0d0d;
      --clr-content: #e6e6e6;
      --clr-accent: #9370ff;
      --clr-complementary: #bada55;
      --clr-debug: #d35f8d;
      --clr-error: #ff5555;
      --clr-info: #5577ff;
      --clr-success: #55cc77;
      --clr-warning: #ffcc44;

      /* Fallback sizing tokens - using px values */
      --xs: 5px;
      --sm: 10px;
      --md: 15px;
      --nm: 20px;
      --lg: 25px;
      --xl: 30px;

      /* Fallback type tokens - using px values */
      --type-xs: 25px;
      --type-sm: 30px;
      --type-md: 35px;
      --type-nm: 40px;
      --type-lg: 50px;
      --type-xl: 60px;

      /* Fallback animation tokens */
      --animDuration: 325ms;
      --animTiming: cubic-bezier(0.45, 0, 0.25, 1.35);
    }
  }
}