@layer reset {
  :where(*) {
    /* This will avoid Flash of Unstyled Content (FOUC), but beware it will also disable improperly used custom elements */
    transition: opacity var(--animDefaults);
    transition-delay: 0.0ms;

    &:not(:defined) {
      opacity: 0;
    }
  }

  :where(*) {
    -moz-leading-trim: both;
    -webkit-leading-trim: both;
    leading-trim: both;
    -moz-text-box-edge: cap alphabetic;
    -webkit-text-box-edge: cap alphabetic;
    text-box-edge: cap alphabetic;
    -moz-text-box-trim: trim-both;
    -webkit-text-box-trim: trim-both;
    text-box-trim: trim-both;
    -moz-vertical-trim: trim;
    -webkit-vertical-trim: trim;
    vertical-trim: trim;
    -moz-tap-highlight-color: transparent;
    -webkit-tap-highlight-color: transparent;
    tap-highlight-color: transparent;
  }

  :where(*) {
    border: none;
    border-width: var(--config-borderWidth);
    box-sizing: border-box;
    line-height: inherit;
    margin: 0;
    max-width: 100%;
    min-height: 0;
    min-width: 0;
    outline: none;
    outline-offset: calc(var(--config-outlineWidth) * -1);
    outline-width: var(--config-outlineWidth);
    padding: 0;
    position: relative;
    scroll-behavior: smooth;
    text-decoration: none;

    &::before {
      box-sizing: inherit;
    }

    &::after {
      box-sizing: inherit;
    }

    &[disabled],
    &[not-allowed] {
      opacity: 0.75;
      pointer-events: none;
      user-select: none;

      &:is([data-props~="disabled"]) {
        cursor: none;
        filter: grayscale(56%);
      }

      &:is([data-props~="not-allowed"]) {
        cursor: not-allowed;
        filter: sepia(56%) hue-rotate(348deg);
      }
    }
  }
}

@layer reset {
  :is(html) {
    background-color: var(--clr-surface--1);
    color: var(--clr-content--1);

    font-display: swap;
    font-kerning: auto;
    font-family: var(--config-fontFamily);
    font-size: var(--rootSize);

    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;

    font-style: normal;
    font-variant-ligatures: normal;
    font-optical-sizing: auto;
    font-stretch: normal;
    font-weight: var(--config-fontWeight);

    hanging-punctuation: first last;

    letter-spacing: 0.0125rem;

    line-height: var(--config-lineHeight);
    text-align: left;
    text-rendering: optimizeLegibility;

    word-spacing: 0.0625rem;
  }

  :is(html, body) {
    height: 100dvh;
    overflow-x: clip;
    overflow-y: auto;
    position: fixed;
    width: 100dvw;

    &:has(#app) {
      isolation: isolate;
      display: contents;
      overflow: clip;
      overscroll-behavior: contain;

      & > #app {
        height: 100dvh;
        overflow: clip;
        width: 100dvw;
      }
    }
  }

  :where(h1, h2, h3, h4, h5, h6) {
    display: block;
    font-weight: 500;
    text-wrap: balance;

    &:is(h1) {
      font-size: var(--scale-xl);
    }

    &:is(h2) {
      font-size: var(--scale-lg);
    }

    &:is(h3) {
      font-size: var(--scale-nm);
    }

    &:is(h4) {
      font-size: var(--scale-md);
    }

    &:is(h5) {
      font-size: var(--scale-sm);
    }

    &:is(h6) {
      font-size: var(--scale-xs);
    }
  }

  :where(blockquote, q) {
    border-left: 0.125rem solid var(--clr-subtext);
    font-size: var(--scale-nm);
    padding: var(--scale-sm) 0 var(--scale-sm) var(--scale-sm);
  }

  :where(cite) {
    font-size: 75%;
    font-style: italic;
    font-weight: 500;
    text-wrap: pretty;
    width: min(72ch, 100%);
  }

  :where(p) {
    display: block;
    font-size: var(--scale-md);
    text-wrap: pretty;
    width: min(72ch, 100%);
  }

  :where(span) {
    font-size: var(--scale-md);
  }

  :where(caption, figcaption, legend) {
    display: inline-flex;
    font-size: var(--scale-sm);
    font-weight: 500;
  }

  :where(small) {
    font-size: 75%;
  }

  :where(audio, button, figure, i, iframe, img, picture, svg, video) {
    -webkit-user-select: none;
    user-select: none;
  }

  :where(figure) {
    border-radius: var(--scale-xs);
    display: inline-grid;
    flex-shrink: 0;
    overflow: clip;

    > img,
    > object,
    > picture,
    > svg {
      height: 100%;
      object-fit: cover;
      object-position: center;
      width: 100%;
    }
  }

  :where(footer, header) {
    display: flex;
    flex-direction: column;
  }

  :where(aside, fieldset, form, main, section) {
    display: flex;
    flex-direction: column;
  }
}

@layer normalize {
  :where(address) {
    font-size: var(--scale-md);
  }

  :where(hr) {
    background-color: var(--clr-surface--2);

    &:is([data-props~="--x"]) {
      height: calc(var(--scale-xs) * 0.1625);
      width: 100%;
    }

    &:is([data-props~="--y"]) {
      height: 100%;
      width: calc(var(--scale-xs) * 0.1625);
    }
  }
}

@layer normalize {
  :where(dl) {
    display: grid;
    gap: var(--scale-sm);
    min-height: 0;
    position: relative;

    & > dt {
      font-size: var(--scale-nm);
      font-weight: 500;
    }

    & > dd {
      font-size: var(--scale-md);
      margin-top: calc(var(--scale-sm) * -1);
      padding-left: var(--scale-sm);
    }
  }

  :where(ol, ul) {
    list-style-position: inside;

    & > li {
      font-size: var(--scale-nm);
      text-wrap: pretty;
      width: min(72ch, 100%);
    }

    & :where(ol, ul) {
      margin-left: var(--scale-xs);
    }

    &:is(ol) {
      counter-reset: li;

      & li {
        counter-increment: li;

        &::marker {
          content: counter(li) ". ";
        }

        &:is(.__counter) {
          &::marker {
            content: none;
            display: none;
          }
        }
      }

      & .__counter {
        counter-increment: li;
        font-style: normal;
        font-variant-numeric: slashed-zero;

        &::before,
        &::after {
          clear: both;
          display: inline-block;
          margin-inline: 0.5rem;
        }

        &:is([data-props~="--lead"])::before {
          content: counter(li) ". ";
        }

        &:is([data-props~="--trail"])::after {
          content: " ." counter(li);
        }
      }
    }

    &:is(ul) {
      & li {
        &::marker {
          clear: both;
          content: "- ";
          display: inline-block;
          margin-inline: 0.5rem;
        }
      }
    }
  }
}

@layer normalize {
  :where(details) {
    display: inline-flex;
    min-height: 0;
    position: relative;
    width: fit-content;

    & > summary {
      & :is([data-props~="--animate"]) {
        transition: rotate var(--animDefaults);
      }
    }

    &[open] {
      & > summary {
        & :is([data-props~="--animate"]) {
          rotate: -180deg;
        }
      }
    }
  }
}

@layer normalize {
  :where(a, button, summary) {
    --bg: none;
    --clr: inherit;
    --gap: var(--spacing);
    --mx: 0;
    --my: 0;
    --outln: var(--bg);
    --px: var(--spacing);
    --py: 0;
    --radius: 0;
    --spacing: var(--scale-xs);
    --size: clamp(24pt, 2lh, var(--scale-xl));

    align-items: center;
    background-color: var(--bg);
    border-radius: var(--radius);
    color: var(--clr);
    cursor: pointer;
    display: inline-flex;
    font-size: var(--scale-md);
    font-weight: 400;
    gap: var(--gap);
    margin: var(--my) var(--mx);
    outline: solid transparent;
    overflow: clip;
    padding: var(--py) var(--px);
    text-overflow: ellipsis;
    transition:
      background-color var(--animDefaults),
      color var(--animDefaults),
      outline-color var(--animDefaults);
    white-space: nowrap;
    width: fit-content;

    /* text must be wrapped */
    & > span {
      display: inline-flex;
      color: inherit;
      flex: 1;
      font: inherit;
      overflow: clip;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    & > figure {
      aspect-ratio: 1/1;
      border-radius: 50%;
      height: calc(100% - var(--spacing));
      width: max-content;
    }

    & > ly-icon {
      --bg: none;
      pointer-events: none;
    }

    /* No icons */
    &:not(:has(:where(:is([data-props~="--lead"])):first-child)):not(
      :has(:where(:is([data-props~="--trail"])):last-child)
    ) {
      --px: calc(var(--spacing) * 2.75);
    }

    /* Left icon only */
    &:has(:where(:is([data-props~="--lead"])):first-child):is(
      :not(:has(:where(:is([data-props~="--trail"])):last-child))
    ) {
      padding-inline-end: calc(var(--spacing) * 2);
    }

    /* Right icon only */
    &:has(:where(:is([data-props~="--trail"])):last-child):is(
      :not(:has(:where(:is([data-props~="--lead"])):first-child))
    ) {
      padding-inline-start: calc(var(--spacing) * 2);
    }

    &[href] {
      --clr: var(--clr-accent);
    }

    &:not(button, :is(a, summary):is([data-props~="--button"])) {
      height: max-content;
      padding: 0;
    }

    &:is(button, :is(a, summary):is([data-props~="--button"])) {
      --bg: transparent;
      --radius: var(--scale-xl);
      height: var(--size);
    }

    &:is(button, :is([data-props~="--button"])):is([data-props~="--outline"]) {
      outline-color: color-mix(
        in var(--config-colorSpace, srgb),
        var(--outln),
        gray 16%
      );
    }

    &:is(button, :is([data-props~="--button"])):is([data-props~="--fab"]) {
      --px: 0;
      --py: 0;
      aspect-ratio: 1/1;
      place-content: center;
      width: max-content;
    }

    /* Micro Interactions */
    @media (hover: hover) {
      &:hover {
        background-color: color-mix(
          in var(--config-colorSpace, srgb),
          var(--bg),
          gray 16%
        );
        color: color-mix(
          in var(--config-colorSpace, srgb),
          var(--clr),
          gray 16%
        );

        &:is(button, :is([data-props~="--button"])):is(
          [data-props~="--outline"]
        ) {
          outline-color: color-mix(
            in var(--config-colorSpace, srgb),
            var(--outln),
            gray 16%
          );
        }
      }
    }

    &:active {
      background-color: color-mix(
        in var(--config-colorSpace, srgb),
        var(--bg),
        darkgray 16%
      );
      color: color-mix(
        in var(--config-colorSpace, srgb),
        var(--clr),
        darkgray 16%
      );

      &:is(button, :is([data-props~="--button"])):is(
        [data-props~="--outline"]
      ) {
        outline-color: color-mix(
          in var(--config-colorSpace, srgb),
          var(--outln),
          darkgray 16%
        );
      }
    }

    &:focus-visible {
      --outln: var(--clr-accent);
      outline-color: color-mix(
        in var(--config-colorSpace, srgb),
        var(--outln),
        transparent 56%
      );
    }
  }
}

@layer normalize {
  :where(input, select, textarea) {
    --bg: var(--clr-background);
    --clr: inherit;
    --gap: calc(var(--spacing) * 0.25);
    --mx: 0;
    --my: 0;
    --outln: color-mix(in srgb, var(--bg), darkgray 16%);
    --px: var(--spacing);
    --py: 0;
    --radius: var(--scale-sm);
    --spacing: var(--scale-sm);

    align-items: center;
    background-color: var(--bg);
    border-radius: var(--radius);
    color: var(--clr);
    cursor: pointer;
    font-size: var(--scale-nm);
    font-weight: 400;
    gap: var(--gap);
    margin: var(--my) var(--mx);
    outline: solid var(--outln);
    overflow: clip;
    padding: var(--py) var(--px);
    text-overflow: ellipsis;
    transition:
      background-color var(--animDefaults),
      color var(--animDefaults),
      outline-color var(--animDefaults);
    white-space: nowrap;
    width: fit-content;

    /* input, select only */
    &:is(input, select) {
      display: inline-flex;
      height: var(--scale-5xl);
    }

    /* input only */
    &:is(input) {
      &::-webkit-inner-spin-button,
      &::-webkit-outer-spin-button {
        display: none;
      }

      &::-webkit-calendar-picker-indicator {
        cursor: pointer;
        height: 100%;
        inset: 0;
        opacity: 0;
        position: absolute;
        width: 100%;
      }

      &:is([type="color"]) {
        appearance: none;
        aspect-ratio: 1/1;
        border-radius: var(--scale-xs);
        height: auto;
        overflow: hidden;
        padding: 0;
        width: var(--scale-xl);

        &::-webkit-color-swatch-wrapper {
          padding: 0;
        }

        &::-webkit-color-swatch {
          border: none;
        }
      }

      &:is([type="checkbox"], [type="radio"]) {
        --bg: transparent;
        --family:
          "Material Symbols Outlined", "Material Symbols Rounded",
          "Material Symbols Sharp", sans-serif;
        --px: 0;
        --py: 0;
        --size: 0.88lh;

        appearance: none;
        aspect-ratio: 1/1;
        background-color: var(--bg);
        display: inline-grid;
        flex-grow: 0;
        flex-shrink: 0;
        font-family: var(--family);
        font-feature-settings: "liga";
        font-size: var(--size);
        font-variation-settings:
          "FILL" var(--fill),
          "wght" 400,
          "GRAD" 400,
          "opsz" 48;
        height: var(--size);
        overflow: clip;
        place-content: center center;
        shape-margin: var(--scale-xs);
        shape-outside: circle(50%);
        user-select: none;
        vertical-align: middle;
        width: auto;

        &:checked {
          --bg: var(--clr-accent);
        }

        &:is([type="checkbox"]:not([data-props~="--switch"])) {
          --radius: 25%;
        }

        &:is([type="radio"]:not([data-props~="--switch"])) {
          --radius: 50%;
        }

        &:is([data-props~="--switch"]) {
          --radius: var(--scale-xl);

          position: relative;
          width: calc(var(--size) * 2);

          &::after {
            aspect-ratio: 1/1;
            background-color: color-mix(
              in var(--config-colorSpace, srgb),
              var(--bg),
              darkgray 16%
            );
            border-radius: 50%;
            content: "";
            height: calc(var(--size) - 25%);
            inset: 0 calc(var(--config-outlineWidth) * 1.75);
            margin-block: auto;
            margin-inline: 0 auto;
            position: absolute;
            transition: margin var(--animDefaults);
            width: auto;
          }

          &:checked {
            --bg: transparent;

            &::after {
              --bg: var(--clr-accent);

              margin-inline: 50% auto;
            }
          }
        }
      }

      &:is([type="file"]) {
        display: none;
      }

      &:where(:is([data-props~="--discrete"])) {
        --bg: transparent;
        --px: 0;
        --py: 0;
        --radius: 0;
        height: auto;
        outline: none;
      }
    }

    /* textarea only */
    &:is(textarea) {
      --py: var(--spacing);

      display: block;
      field-sizing: content;
      height: max-content;
      min-height: calc(var(--scale-xl) * 1.75);
      overflow: auto;
      resize: both;
      text-wrap: pretty;
      width: 100%;
    }

    /* Micro Interactions */
    @media (hover: hover) {
      &:hover {
        outline-color: color-mix(
          in var(--config-colorSpace, srgb),
          var(--outln),
          darkgray 16%
        ) !important;
      }
    }

    &:active {
      outline-color: color-mix(
        in var(--config-colorSpace, srgb),
        var(--outln),
        darkgray 8%
      ) !important;
    }

    &:focus-visible {
      outline-color: color-mix(
        in var(--config-colorSpace, srgb),
        var(--clr-accent),
        transparent 56%
      ) !important;
    }
  }
}

@layer normalize {
  :where(label) {
    --clr: inherit;
    --gap: var(--scale-xs);

    display: inline-block;
    color: var(--clr);
    font-size: var(--scale-md);
    width: fit-content;

    &:is([data-props~="--field"]) {
      display: grid;
      gap: var(--gap);
      grid-template-columns: minmax(0, 1fr);
      width: 100%;

      & > :where(:is([data-props~="--label"])) {
        font-size: var(--scale-md);
      }

      & > :where(input, select, textarea) {
        width: 100%;
      }

      & > :where(:is([data-props~="--caption"])) {
        color: var(--clr-subtext);
        font-size: var(--scale-md);
      }
    }
  }
}

@layer normalize {
  :where(nav) {
    display: flex;
    flex-direction: row;
    place-items: center center;
    width: fit-content;

    &:is([data-props~="--y"]) {
      flex-direction: column;
    }

    &:is([data-props~="--tabs"]) {
      --bg: inherit;
      --radius: var(--scale-xl);

      background-color: var(--bg);
      border-radius: var(--radius);
      overflow: clip;

      & > :where(button) {}
    }
  }
}

@layer normalize {
  :where(table) {
    --bg: var(--clr-background);
    --bg--lighter: color-mix(
      in var(--config-colorSpace, srgb),
      var(--bg),
      darkgray 6%
    );
    --clr: var(--clr-text);
    --gap: 0;
    --radius: 0;
    --spacing: var(--scale-sm);

    background-color: var(--bg);
    border-collapse: collapse;
    display: block;
    overflow-x: auto;
    table-layout: auto;
    white-space: nowrap;
    width: fit-content;

    & caption {
      inset: auto 0 0;
      margin: auto;
      position: absolute;
      translate: 0% 100%;
      width: fit-content;
      z-index: auto;
    }

    & tr {
      border-bottom: solid var(--bg--lighter);

      &:first-child {
        border-top: solid var(--bg--lighter);
      }

      & > th,
      & > td {
        font-size: var(--scale-nm);
        font-weight: 400;
        height: var(--scale-5xl);
        line-height: 0;
        min-height: fit-content;
        min-width: max-content;
        overflow: clip;
        padding: calc(var(--spacing) * 0.75) calc(var(--spacing) * 3);
        position: relative;
        text-overflow: ellipsis;
        vertical-align: middle;
        white-space: nowrap;
        width: auto;

        & > * {
          line-height: var(--config-lineHeight);
        }

        & > .marker {
          --bg: none;

          inset: 0 0 0 auto;
          margin: auto 0;
          position: absolute;
        }
      }
    }

    & thead {
      & > tr {
        & > th {
          font-weight: 500;

          &:not(:last-child) {
            border-right: solid var(--bg--lighter);
          }
        }
      }
    }

    & tbody {
      & > tr {
        transition: background-color var(--animDefaults);

        @media (hover: hover) {
          &:hover {
            background-color: color-mix(
              in var(--config-colorSpace, srgb),
              var(--bg),
              darkgray 1%
            );
          }
        }

        & > td {
          &:not(:last-child) {
            border-right: solid var(--bg--lighter);
          }
        }
      }
    }
  }
}

@layer normalize {
  :where(code) {
    display: inline;
    font-family: monospace;
    text-wrap: nowrap;
    white-space-collapse: preserve;
  }

  :where(pre) {
    border-radius: var(--scale-xs);
    display: block;
    font-family: monospace;
    overflow-x: auto;
    padding: var(--scale-xl);
    text-wrap: nowrap;
    white-space: pre;
    white-space-collapse: preserve;
  }
}
